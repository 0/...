#!/usr/bin/env python

import numpy as np


# Parse arguments.
from argparse import ArgumentParser

parser = ArgumentParser(description='Do some statistics.')

parser.add_argument('path', type=str, help='path to the values')

parser.add_argument('--median', dest='median', action='store_true', help='calculate the median')
parser.add_argument('--no-median', dest='median', action='store_false', help="don't calculate the median (default)")

parser.add_argument('--hist-bins', type=int, default=20, help='number of bins in histogram (default: 20)')
parser.add_argument('--hist-width', type=int, default=200, help='width of histogram (default: 200)')

parser.add_argument('--hist-log', dest='hist_log', action='store_true', help='use logarithmic bins')
parser.add_argument('--no-hist-log', dest='hist_log', action='store_false', help='use linear bins (default)')

parser.add_argument('--drop-zeros', dest='drop_zeros', action='store_true', help='ignore any zeros in the input values')
parser.add_argument('--no-drop-zeros', dest='drop_zeros', action='store_false', help='keep all zeros in the input values (default)')

parser.add_argument('--compact', dest='compact', action='store_true', help='only output the mean and standard error, in a compact format')
parser.add_argument('--no-compact', dest='compact', action='store_false', help='output assorted information (default)')

args = parser.parse_args()
values_path = args.path
do_median = args.median
hist_bins = args.hist_bins
hist_width = args.hist_width
hist_log = args.hist_log
drop_zeros = args.drop_zeros
compact = args.compact

if values_path == '-':
    # Read from stdin.
    from sys import stdin

    values_path = stdin


# Get the values.
values = np.fromfile(values_path, sep='\n')

if drop_zeros:
    values = values[values.nonzero()]

num_values = len(values)
mean = values.mean()
std = values.std(ddof=1)
serr = std / np.sqrt(num_values)

if not compact:
    min_value = values.min()
    max_value = values.max()

    if do_median:
        median = np.median(values)
    else:
        median = None

    # Compute the histogram.
    if hist_log:
        # Logarithmic bins.
        bins = np.logspace(np.log10(min_value), np.log10(max_value), hist_bins)
    else:
        # Linear bins.
        bins = hist_bins

    hist_counts, hist_values = np.histogram(values, bins=bins)

# Output data.
if compact:
    print('{0},{1}'.format(mean, serr))
else:
    hist_max_count = hist_counts.max()
    hist_max_value_len = max(map(lambda x: len(str(x)), hist_values))

    for count, value in zip(hist_counts, hist_values):
        value_str = str(value)
        value_spaces = ' ' * (hist_max_value_len - len(value_str))
        count_xs = 'X' * int(count * hist_width / hist_max_count)

        print('{0}{1} {2}'.format(value_spaces, value_str, count_xs))

    print()
    print('Number of values:   {0}'.format(num_values))
    print('Min:                {0}'.format(min_value))
    print('Max:                {0}'.format(max_value))
    print('Variance:           {0}'.format(std * std))
    print('Standard deviation: {0}'.format(std))
    print()
    print('Mean:               {0}'.format(mean))

    if median is not None:
        print('Median:             {0}'.format(median))

    print('Standard error:     {0}'.format(serr))
